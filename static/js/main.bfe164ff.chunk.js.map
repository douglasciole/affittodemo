{"version":3,"sources":["logo.svg","components/Nav.js","components/Footer.js","components/BigDisplay.js","components/Content.js","components/TextField.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","className","src","props","title","subTitle","children","label","type","App","state","apiReturn","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,gPCG5B,G,kBAAA,kBACX,yBAAKC,UAAU,YACX,0BAAMA,UAAU,eACZ,yBAAKA,UAAU,OAAOC,IAAI,sBAC1B,wBAAID,UAAU,YACV,oDCLD,G,MAAA,kBACX,4BAAQA,UAAU,eAAlB,qKCDW,G,MAAA,SAACE,GAAD,OACX,yBAAKF,UAAU,cACX,0BAAMA,UAAU,mBAAmBE,EAAMC,OACzC,0BAAMH,UAAU,kBAAkBE,EAAME,aCHjC,G,MAAA,SAACF,GAAD,OACX,yBAAKF,UAAU,kBACVE,EAAMG,YCFA,G,MAAA,SAACH,GAAD,OACX,2BAAOF,UAAU,eACZE,EAAMI,MACP,2BAAOC,KAAK,aCHL,G,MAAA,SAACL,GAAD,OACX,4BAAQF,UAAW,iBAAmBE,EAAMF,WACvCE,EAAMG,YC0CAG,E,kDAnCb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CAACC,UAAW,SAFR,E,qDAanB,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEG,MAAM,uDACNC,SAAS,oFAGX,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWE,MAAM,8BACjB,kBAAC,EAAD,CAAWA,MAAM,8BACjB,kBAAC,EAAD,CAAWA,MAAM,8BAEjB,kBAAC,EAAD,CAAQN,UAAU,SAAlB,QACA,kBAAC,EAAD,cAEF,kBAAC,EAAD,W,GA9BYW,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bfe164ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport '../css/components/Nav.css'\n \nexport default () =>\n    <nav className='navStyle'>\n        <span className='secondAlign'>\n            <img className='logo' src='./images/logo.png' />\n            <ul className='navItems'>\n                <li>Merchant Portal</li>\n            </ul>\n        </span>\n    </nav>","import React from 'react'\nimport '../css/components/Footer.css'\n\nexport default () =>\n    <footer className='footerStyle'>\n        Copyright â“’ 2020-2035 Affitto Solutions.Headquarters: Vancouver, Britsh Columbia. All rights reserved. Organization number: 556737-0431     Privacy Policy\n    </footer>\n","import React from 'react'\nimport '../css/components/BigDisplay.css'\n\nexport default (props) =>\n    <div className='bigDisplay'>\n        <span className='bigDisplayTitle'>{props.title}</span>\n        <span className='bigDisplayText'>{props.subTitle}</span>\n    </div>\n","import React from 'react'\nimport '../css/components/Content.css'\n\nexport default (props) =>\n    <div className='contentDisplay'>\n        {props.children}\n    </div>\n","import React from 'react'\nimport '../css/components/TextField.css'\n\nexport default (props) =>\n    <label className=\"textDIsplay\">\n        {props.label}\n        <input type=\"input\" />\n    </label>\n","import React from 'react'\nimport '../css/components/Button.css'\n\nexport default (props) =>\n    <button className={\"affittoButton \" + props.className}>\n        {props.children}\n    </button>\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './css/App.css';\n\nimport Nav from \"./components/Nav\"\nimport Footer from \"./components/Footer\"\nimport BigDisplay from './components/BigDisplay';\nimport Content from './components/Content';\nimport TextField from './components/TextField';\nimport Button from './components/Button';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {apiReturn: \"Teste\"};\n\n  }\n\n  // componentWillMount() {\n  //   fetch(\"http://localhost:9000/api\")\n  //   .then(res => res.text())\n  //   .then(res => this.setState({apiReturn: res}))\n  // }\n\nrender(){\n  return (\n    <div className=\"App\">\n      <Nav />\n      <BigDisplay\n        title=\"Can you please enter your tax identification number?\"\n        subTitle=\"We need your company tax identification number to verify your business details.\"\n      />\n      \n      <Content>\n        <TextField label=\"Tax Identification Number\" />\n        <TextField label=\"Tax Identification Number\" />\n        <TextField label=\"Tax Identification Number\" />\n\n        <Button className=\"white\">Back</Button>\n        <Button >Next</Button>\n      </Content>\n      <Footer />\n    </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/fonts/avenir.css';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}